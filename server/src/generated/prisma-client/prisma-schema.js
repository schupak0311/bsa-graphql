module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMessage {
  count: Int!
}

type AggregateMessageReaction {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Message {
  id: Int!
  text: String!
  userId: String!
  likeCount: Int
  dislikeCount: Int
  reply: Int
  reactions(where: MessageReactionWhereInput, orderBy: MessageReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MessageReaction!]
  createdAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: Int
  text: String!
  userId: String!
  likeCount: Int
  dislikeCount: Int
  reply: Int
  reactions: MessageReactionCreateManyWithoutMessageInput
}

input MessageCreateOneWithoutReactionsInput {
  create: MessageCreateWithoutReactionsInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutReactionsInput {
  id: Int
  text: String!
  userId: String!
  likeCount: Int
  dislikeCount: Int
  reply: Int
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  userId_ASC
  userId_DESC
  likeCount_ASC
  likeCount_DESC
  dislikeCount_ASC
  dislikeCount_DESC
  reply_ASC
  reply_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  id: Int!
  text: String!
  userId: String!
  likeCount: Int
  dislikeCount: Int
  reply: Int
  createdAt: DateTime!
}

type MessageReaction {
  id: ID!
  userId: String!
  isLike: Boolean!
  message: Message!
}

type MessageReactionConnection {
  pageInfo: PageInfo!
  edges: [MessageReactionEdge]!
  aggregate: AggregateMessageReaction!
}

input MessageReactionCreateInput {
  id: ID
  userId: String!
  isLike: Boolean!
  message: MessageCreateOneWithoutReactionsInput!
}

input MessageReactionCreateManyWithoutMessageInput {
  create: [MessageReactionCreateWithoutMessageInput!]
  connect: [MessageReactionWhereUniqueInput!]
}

input MessageReactionCreateWithoutMessageInput {
  id: ID
  userId: String!
  isLike: Boolean!
}

type MessageReactionEdge {
  node: MessageReaction!
  cursor: String!
}

enum MessageReactionOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  isLike_ASC
  isLike_DESC
}

type MessageReactionPreviousValues {
  id: ID!
  userId: String!
  isLike: Boolean!
}

input MessageReactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  isLike: Boolean
  isLike_not: Boolean
  AND: [MessageReactionScalarWhereInput!]
  OR: [MessageReactionScalarWhereInput!]
  NOT: [MessageReactionScalarWhereInput!]
}

type MessageReactionSubscriptionPayload {
  mutation: MutationType!
  node: MessageReaction
  updatedFields: [String!]
  previousValues: MessageReactionPreviousValues
}

input MessageReactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageReactionWhereInput
  AND: [MessageReactionSubscriptionWhereInput!]
  OR: [MessageReactionSubscriptionWhereInput!]
  NOT: [MessageReactionSubscriptionWhereInput!]
}

input MessageReactionUpdateInput {
  userId: String
  isLike: Boolean
  message: MessageUpdateOneRequiredWithoutReactionsInput
}

input MessageReactionUpdateManyDataInput {
  userId: String
  isLike: Boolean
}

input MessageReactionUpdateManyMutationInput {
  userId: String
  isLike: Boolean
}

input MessageReactionUpdateManyWithoutMessageInput {
  create: [MessageReactionCreateWithoutMessageInput!]
  delete: [MessageReactionWhereUniqueInput!]
  connect: [MessageReactionWhereUniqueInput!]
  set: [MessageReactionWhereUniqueInput!]
  disconnect: [MessageReactionWhereUniqueInput!]
  update: [MessageReactionUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [MessageReactionUpsertWithWhereUniqueWithoutMessageInput!]
  deleteMany: [MessageReactionScalarWhereInput!]
  updateMany: [MessageReactionUpdateManyWithWhereNestedInput!]
}

input MessageReactionUpdateManyWithWhereNestedInput {
  where: MessageReactionScalarWhereInput!
  data: MessageReactionUpdateManyDataInput!
}

input MessageReactionUpdateWithoutMessageDataInput {
  userId: String
  isLike: Boolean
}

input MessageReactionUpdateWithWhereUniqueWithoutMessageInput {
  where: MessageReactionWhereUniqueInput!
  data: MessageReactionUpdateWithoutMessageDataInput!
}

input MessageReactionUpsertWithWhereUniqueWithoutMessageInput {
  where: MessageReactionWhereUniqueInput!
  update: MessageReactionUpdateWithoutMessageDataInput!
  create: MessageReactionCreateWithoutMessageInput!
}

input MessageReactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  isLike: Boolean
  isLike_not: Boolean
  message: MessageWhereInput
  AND: [MessageReactionWhereInput!]
  OR: [MessageReactionWhereInput!]
  NOT: [MessageReactionWhereInput!]
}

input MessageReactionWhereUniqueInput {
  id: ID
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  text: String
  userId: String
  likeCount: Int
  dislikeCount: Int
  reply: Int
  reactions: MessageReactionUpdateManyWithoutMessageInput
}

input MessageUpdateManyMutationInput {
  text: String
  userId: String
  likeCount: Int
  dislikeCount: Int
  reply: Int
}

input MessageUpdateOneRequiredWithoutReactionsInput {
  create: MessageCreateWithoutReactionsInput
  update: MessageUpdateWithoutReactionsDataInput
  upsert: MessageUpsertWithoutReactionsInput
  connect: MessageWhereUniqueInput
}

input MessageUpdateWithoutReactionsDataInput {
  text: String
  userId: String
  likeCount: Int
  dislikeCount: Int
  reply: Int
}

input MessageUpsertWithoutReactionsInput {
  update: MessageUpdateWithoutReactionsDataInput!
  create: MessageCreateWithoutReactionsInput!
}

input MessageWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  dislikeCount: Int
  dislikeCount_not: Int
  dislikeCount_in: [Int!]
  dislikeCount_not_in: [Int!]
  dislikeCount_lt: Int
  dislikeCount_lte: Int
  dislikeCount_gt: Int
  dislikeCount_gte: Int
  reply: Int
  reply_not: Int
  reply_in: [Int!]
  reply_not_in: [Int!]
  reply_lt: Int
  reply_lte: Int
  reply_gt: Int
  reply_gte: Int
  reactions_every: MessageReactionWhereInput
  reactions_some: MessageReactionWhereInput
  reactions_none: MessageReactionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createMessageReaction(data: MessageReactionCreateInput!): MessageReaction!
  updateMessageReaction(data: MessageReactionUpdateInput!, where: MessageReactionWhereUniqueInput!): MessageReaction
  updateManyMessageReactions(data: MessageReactionUpdateManyMutationInput!, where: MessageReactionWhereInput): BatchPayload!
  upsertMessageReaction(where: MessageReactionWhereUniqueInput!, create: MessageReactionCreateInput!, update: MessageReactionUpdateInput!): MessageReaction!
  deleteMessageReaction(where: MessageReactionWhereUniqueInput!): MessageReaction
  deleteManyMessageReactions(where: MessageReactionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  messageReaction(where: MessageReactionWhereUniqueInput!): MessageReaction
  messageReactions(where: MessageReactionWhereInput, orderBy: MessageReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MessageReaction]!
  messageReactionsConnection(where: MessageReactionWhereInput, orderBy: MessageReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageReactionConnection!
  node(id: ID!): Node
}

type Subscription {
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  messageReaction(where: MessageReactionSubscriptionWhereInput): MessageReactionSubscriptionPayload
}
`
      }
    